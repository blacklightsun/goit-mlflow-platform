# ---
# Фінальна версія ArgoCD Application для розгортання MLflow
# Конфігурація:
# - Метадані (експерименти, метрики): SQLite база даних
# - Артефакти (моделі, файли): Локальне файлове сховище
# - Сховище: Персистентний том (PersistentVolumeClaim)
# - Доступ: Через NodePort (для Minikube)
# ---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # Назва додатку, яка буде відображатись в ArgoCD UI.
  name: mlflow
  # Розгортаємо цей 'Application' в неймспейс, де живе сам ArgoCD.
  namespace: argopd
spec:
  # Проєкт ArgoCD, до якого належить додаток. 'default' підходить для більшості випадків.
  project: default

  # Джерело: звідки ArgoCD бере маніфести для розгортання.
  # В нашому випадку — це офіційний Helm-чарт від спільноти.
  source:
    repoURL: https://community-charts.github.io/helm-charts
    chart: mlflow
    # Фіксуємо версію чарту для стабільності та передбачуваності розгортання.
    targetRevision: 2.10.1

    # 'values' дозволяють нам перевизначити стандартні налаштування Helm-чарту.
    # Це найважливіша частина нашої конфігурації.
    helm:
      values: |
        # Встановлюємо тип сервісу NodePort, щоб було легко отримати
        # доступ до UI та API з локальної машини через 'minikube service'.
        service:
          type: NodePort

        # Вмикаємо персистентність. Це критично важливо для збереження
        # даних SQLite та артефактів між перезапусками поду.
        persistence:
          enabled: true
          # Ви можете змінити розмір сховища відповідно до ваших потреб.
          size: 2Gi

        # Явно вказуємо, що сховищем для метаданих буде база даних SQLite.
        # Файл бази даних буде знаходитись на нашому персистентному томі.
        backend_store:
          sqlite:
            path: /mlflow/mlflow.db

        # Явно вказуємо, що сховищем для артефактів (моделей, файлів)
        # буде локальна директорія всередині поду. Ця директорія
        # також буде знаходитись на нашому персистентному томі.
        artifacts:
          destination: /mlflow/artifacts

  # Місце призначення: куди саме в кластері розгортати MLflow.
  destination:
    # Стандартне значення для розгортання в тому ж кластері, де працює ArgoCD.
    server: https://kubernetes.default.svc
    # Створюємо та використовуємо окремий неймспейс для MLflow,
    # щоб ізолювати його ресурси від інших додатків.
    namespace: mlflow

  # Політика синхронізації: як ArgoCD має підтримувати стан додатку.
  syncPolicy:
    automated:
      # Дозволяє ArgoCD видаляти ресурси, яких більше немає в Helm-чарті (наприклад, після оновлення).
      prune: true
      # Дозволяє ArgoCD автоматично виправляти відхилення конфігурації,
      # якщо хтось змінив ресурси в кластері вручну.
      selfHeal: true
    syncOptions:
      # Дуже корисна опція: ArgoCD автоматично створить неймспейс 'mlflow',
      # якщо він ще не існує, під час першої синхронізації.
      - CreateNamespace=true
